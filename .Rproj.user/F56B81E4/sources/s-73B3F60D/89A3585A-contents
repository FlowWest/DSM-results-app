home_ui <- function(id) {
  
  ns <- NS(id)
  
  tagList(
    fluidRow(
      column(width = 5,
             tags$h4("Percent Change from No Action Baseline"),
             selectInput(ns("Run"), label = "Run", 
                         choices = c("Fall Run", "Spring Run", "Winter Run"),
                         multiple = TRUE, selected = "Fall Run"),
             DT::dataTableOutput(ns("percent_change_table"))), 
      column(width = 5, 
             tags$h4("Action Type and Units of Effort"),
             fluidRow(column( width = 3, selectInput(ns("Scenario"), 
                                                     label = "Scenarios", 
                                                     choices = c('One', 'Two', 'Three', 
                                                                 'Four', 'Five', 'Six', 
                                                                 'Seven', 'Eight', 'Nine', 
                                                                 'Ten', 'Eleven', 'Twelve', 
                                                                 'Thirteen'))),
                      column(width = 5, selectInput(ns("plot_type"), 
                                                    label = "Plot Type", 
                                                    choices = c("Actions Applied Over Time", 
                                                                "Cummulative Acres of Actions")))),
             htmlOutput(ns("text")),
             tags$br(),
             plotlyOutput(ns("actions_plot")), 
             
      )
    )
    
    
    #   column(width = 7, 
    #          withSpinner(plotlyOutput(ns('time_series_plot')), type = 8, color = "#666666"), 
    #          uiOutput(ns("scaled_note"))), 
  )
  
  
}

home_server <- function(input, output, session) {
  
  ns <- session$ns
  
  selected_scenario <- reactive({
    scenario_data %>% filter(scenario == toupper(input$Scenario)) 
  })
  
  output$percent_change_table <- DT::renderDataTable(
    percent_change %>% filter(Run %in% input$Run) %>% select(-Description),
    selection = "none",
    options = list(dom = 'tip', pageLength = 15, bAutoWidth = FALSE)
  )
  
  output$actions_plot <- renderPlotly({
    if (input$plot_type == "Actions Applied Over Time") {
      
      gg <- selected_scenario() %>% 
        filter(units_of_effort > 0) %>%
        ggplot(aes(year, units_of_effort, fill = action_type)) +
        geom_col() +
        labs(x = "Year", 
             y = "Units of Effort", 
             title = paste0("Scenario ", input$Scenario)) +
        scale_y_continuous(breaks = c(0, 1, 2, 3, 4, 5)) +
        scale_fill_manual(values =  c("#00A08A", "#5BBCD6","#F2AD00", "#FF0000")) +
        facet_wrap(~watershed, ncol = 1) +
        theme_minimal() 
      
      height <- ifelse(input$Scenario %in% c("Eleven", "Nine"), 900, 600) # TODO figure out height of plot 9 and 11
    } else {
      
      plot_data <- selected_scenario() %>% 
        filter(units_of_effort > 0) %>%
        mutate(acres = ifelse(action_type == "survival", .5 * units_of_effort, 2 * units_of_effort))
      
      gg <- plot_data %>% 
        ggplot(aes(x = watershed, y = acres)) + 
        geom_col(aes(fill = action_type)) + 
        labs(x = "Watershed",
             y = "Total Acres",
             title = paste0("Scenario ", input$Scenario)) +
        coord_flip() +
        scale_fill_manual(values =  c("#00A08A", "#5BBCD6","#F2AD00", "#FF0000")) +
        theme_minimal()
      
      height <- 600
    }
    
    ggplotly(gg) %>% layout(height = height, width = 900)
  })
  
  output$text <- renderUI({
    return(HTML(paste("<strong>", scenario_names[[input$Scenario]], "</strong>", ":", descriptions[[input$Scenario]])))
  })
  
}