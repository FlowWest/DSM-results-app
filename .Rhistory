shiny::runApp()
percent_change <- tibble(
Scenario = 1:13,
`Natural Spawners` = paste0(round(runif(13) * 100), "%"),
`Juvenile Biomass` = paste0(round(runif(13) * 100), "%")
)
runApp()
install.packages('shinydashboard')
runApp()
runApp()
output$percent_change_table <- DT::renderDataTable(
percent_change,)
percent_change <- tibble(
`Scenario Number ` = 1:13,
`Scenario Name` = rep("Scenarion X", 13),
`Natural Spawners` = paste0(round(runif(13) * 100), "%"),
`Juvenile Biomass` = paste0(round(runif(13) * 100), "%")
)
runApp()
runApp()
runApp()
runApp()
input$Scenario ==  "Eleven"
runApp()
plot_data <- selected_scenario() %>%
filter(units_of_effort > 0) %>%
gg <- plot_data %>%
ggplot(aes(year, units_of_effort, fill = action_type)) +
geom_col() +
labs(x = "Year",
y = "Units of Effort",
title = paste0("Scenario ", input$Scenario)) +
scale_y_continuous(breaks = c(0, 1, 2, 3, 4, 5)) +
scale_fill_manual(values =  c("#00A08A", "#5BBCD6","#F2AD00", "#FF0000")) +
facet_wrap(~watershed, ncol = 1, scales = 'free_y') +
theme_minimal()
plot_data
runApp()
fixfacets <- function(figure, facets, domain_offset){
# split x ranges from 0 to 1 into
# intervals corresponding to number of facets
# xHi = highest x for shape
xHi <- seq(0, 1, len = n_facets+1)
xHi <- xHi[2:length(xHi)]
xOs <- domain_offset
# Shape manipulations, identified by dark grey backround: "rgba(217,217,217,1)"
# structure: p$x$layout$shapes[[2]]$
shp <- fig$x$layout$shapes
j <- 1
for (i in seq_along(shp)){
if (shp[[i]]$fillcolor=="rgba(217,217,217,1)" & (!is.na(shp[[i]]$fillcolor))){
#$x$layout$shapes[[i]]$fillcolor <- 'rgba(0,0,255,0.5)' # optionally change color for each label shape
fig$x$layout$shapes[[i]]$x1 <- xHi[j]
fig$x$layout$shapes[[i]]$x0 <- (xHi[j] - xOs)
#fig$x$layout$shapes[[i]]$y <- -0.05
j<-j+1
}
}
# annotation manipulations, identified by label name
# structure: p$x$layout$annotations[[2]]
ann <- fig$x$layout$annotations
annos <- facets
j <- 1
for (i in seq_along(ann)){
if (ann[[i]]$text %in% annos){
# but each annotation between high and low x,
# and set adjustment to center
fig$x$layout$annotations[[i]]$x <- (((xHi[j]-xOs)+xHi[j])/2)
fig$x$layout$annotations[[i]]$xanchor <- 'center'
#print(fig$x$layout$annotations[[i]]$y)
#fig$x$layout$annotations[[i]]$y <- -0.05
j<-j+1
}
}
# domain manipulations
# set high and low x for each facet domain
xax <- names(fig$x$layout)
j <- 1
for (i in seq_along(xax)){
if (!is.na(pmatch('xaxis', lot[i]))){
#print(p[['x']][['layout']][[lot[i]]][['domain']][2])
fig[['x']][['layout']][[xax[i]]][['domain']][2] <- xHi[j]
fig[['x']][['layout']][[xax[i]]][['domain']][1] <- xHi[j] - xOs
j<-j+1
}
}
return(fig)
}
runApp()
runApp()
runApp()
shiny::runApp()
scenario_data %>% filter(scenario == "one")
scenario_data %>% filter(scenario == "ONE")
scenario_one <- scenario_data %>% filter(scenario == "ONE")
scenario_one %>%
mutate(acres <- ifelse(action_type == "survival", .5 * units_of_effort, 2 * units_of_effort)) %>%
ggplot(aes(x = watershed, y = units))
scenario_one %>%
mutate(acres <- ifelse(action_type == "survival", .5 * units_of_effort, 2 * units_of_effort)) %>%
ggplot(aes(x = watershed, y = acres))
scenario_one %>%
mutate(acres = ifelse(action_type == "survival", .5 * units_of_effort, 2 * units_of_effort)) %>%
ggplot(aes(x = watershed, y = acres))
scenario_one %>%
filter(units_of_effort > 0) %>%
mutate(acres = ifelse(action_type == "survival", .5 * units_of_effort, 2 * units_of_effort)) %>%
ggplot(aes(x = watershed, y = acres))
scenario_one
scenario_one %>%
filter(units_of_effort > 0) %>%
mutate(acres = ifelse(action_type == "survival", .5 * units_of_effort, 2 * units_of_effort))
scenario_one %>%
filter(units_of_effort > 0) %>%
mutate(acres = ifelse(action_type == "survival", .5 * units_of_effort, 2 * units_of_effort)) %>%
ggplot(aes(x = watershed, y = acres)) +
geom_col()
scenario_one %>%
filter(units_of_effort > 0) %>%
mutate(acres = ifelse(action_type == "survival", .5 * units_of_effort, 2 * units_of_effort)) %>%
ggplot(aes(x = watershed, y = acres)) +
geom_col(aes(fill = action_type))
scenario_one <- scenario_data %>% filter(scenario == "EIGHT")
scenario_one %>%
filter(units_of_effort > 0) %>%
mutate(acres = ifelse(action_type == "survival", .5 * units_of_effort, 2 * units_of_effort)) %>%
ggplot(aes(x = watershed, y = acres)) +
geom_col(aes(fill = action_type))
scenario_one <- scenario_data %>% filter(scenario == "ELEVEN")
scenario_one %>%
filter(units_of_effort > 0) %>%
mutate(acres = ifelse(action_type == "survival", .5 * units_of_effort, 2 * units_of_effort)) %>%
ggplot(aes(x = watershed, y = acres)) +
geom_col(aes(fill = action_type))
scenario_one %>%
filter(units_of_effort > 0) %>%
mutate(acres = ifelse(action_type == "survival", .5 * units_of_effort, 2 * units_of_effort)) %>%
ggplot(aes(x = watershed, y = acres)) +
geom_col(aes(fill = action_type)) + coord_flip()
scenario_one %>%
filter(units_of_effort > 0) %>%
mutate(acres = ifelse(action_type == "survival", .5 * units_of_effort, 2 * units_of_effort)) %>%
ggplot(aes(x = watershed, y = acres)) +
geom_col(aes(fill = action_type)) +
labs(x = "Watershed",
y = "Total Acres") +
coord_flip()
runApp()
runApp()
# TODO fix these to reflect new names/descriptions (Need 13)
scenario_definitions <- c(
"No actions are undertaken to increase habitat or survival.",
"Annual maximization of inputs that result in maximum natural spawners",
"Annual minimization of inputs",
"Annual maximization of inputs that result in maximum natural spawners, with an additional requirement that at least one unit is expended in each of the four diversity groups each year.",
"Annual minimization of inputs, with an additional requirement that at least one unit is expended in each of the four diversity groups each year.",
"Annual maximization of inputs that result in maximum natural spawners, with all units concentrated on streams without an active fish hatchery",
"Annual maximization of inputs that result in maximum natural spawners, with all units concentrated on streams with an active fish hatchery"
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(descriptions) <- scenario_numbers
scenario_numbers <- c('One', 'Two', 'Three',
'Four', 'Five', 'Six',
'Seven', 'Eight', 'Nine',
'Ten', 'Eleven', 'Twelve',
'Thirteen')
names(descriptions) <- scenario_numbers
# TODO fix these to reflect new names/descriptions (Need 13)
descriptions <- c(
"Restoration limited to in-channel Upper Sacramento, Butte, Lower Mid Sac, Feather, American, Deer, Battle. and Stanislaus",
"Restoration limited to in-channel Upper Sacramento, Butte, Lower Mid Sac, Feather, American, Deer, Clear, and Stanislaus",
"Restoration limited to in-channel Upper Sacramento, Butte, Lower Mid Sac, Feather, American, Mokelumne, Clear, and Stanislaus",
"Restoration limited to in-channel in Mainstem Sacramento only",
"Restoration limited to in-channel Upper Sac, Lower Mid Sac, Cow Creek and Clear",
"Restoration limited to in-channel Upper Sac, Lower Mid, and American with some maintenance in Clear and Butte",
"Restoration limited to floodplain Upper Sac, Upper Mid, Lower Mid, Lower Sac, and San Joaquin",
"Restoration optimized to increase Winter-run population every year (limited to locations where WR occur)",
"Restoration optimized to increase Spring-run population every year (limited to locations where SR occur)",
"Restoration limited to in-channel equally distributed between Upper Mid, Deer, Butte, Clear, Mill, Battle, Antelope",
"Restoration optimized to increase Fall-run population every year (one action in each diversity group)",
"Restoration optimized to increase Fall-run population every year (one action in each diversity group)",
"Restoration optimized to increase Fall-run population every year (actions limited to Upper Sac, Lower Sac, American, Stanislaus, and Mokelumne)"
)
names <- c('In-Channel Only - Urkov', 'In-Channel Only - Brown', 'In-Channel Only - Bilski',
'In-Channel Only - Mainstem Sac', 'In-Channel Only - Berry', 'In-Channel Only - Peterson',
'Floodplain Only - Mainstem Sac', 'Winter-run Optimized',
'Spring-run Optimized', 'Spring-run In-Channel - Philips',
'Fall-run Diversity Group Optimized', 'Fall-run Optimized - Beakes',
'Fall-run Optimized - Bilski')
fall_percent_change <- tibble(
`Scenario Name` = names,
`Description` = scenario_definitions,
`Natural Spawners` = paste0(round(runif(13) * 100), "%"),
`Juvenile Biomass` = paste0(round(runif(13) * 100), "%")
)
Description
fall_percent_change <- tibble(
`Scenario Name` = names,
`Description` = descriptions,
`Natural Spawners` = paste0(round(runif(13) * 100), "%"),
`Juvenile Biomass` = paste0(round(runif(13) * 100), "%")
)
spring_percent_change <- tibble(
# `Scenario Number ` = 1:13,
`Scenario Name` = rep("Scenario X", 13),
`Natural Spawners` = paste0(round(runif(13) * 100), "%"),
`Juvenile Biomass` = paste0(round(runif(13) * 100), "%")
)
winter_percent_change <- tibble(
# `Scenario Number ` = 1:13,
`Scenario Name` = rep("Scenario X", 13),
`Natural Spawners` = paste0(round(runif(13) * 100), "%"),
`Juvenile Biomass` = paste0(round(runif(13) * 100), "%")
)
scenario_numbers <- c('One', 'Two', 'Three',
'Four', 'Five', 'Six',
'Seven', 'Eight', 'Nine',
'Ten', 'Eleven', 'Twelve',
'Thirteen')
names(descriptions) <- scenario_numbers
scenario_numbers <- c('One', 'Two', 'Three',
'Four', 'Five', 'Six',
'Seven', 'Eight', 'Nine',
'Ten', 'Eleven', 'Twelve',
'Thirteen')
names(names) <- scenario_numbers
scenario_names <- c('In-Channel Only - Urkov', 'In-Channel Only - Brown', 'In-Channel Only - Bilski',
'In-Channel Only - Mainstem Sac', 'In-Channel Only - Berry', 'In-Channel Only - Peterson',
'Floodplain Only - Mainstem Sac', 'Winter-run Optimized',
'Spring-run Optimized', 'Spring-run In-Channel - Philips',
'Fall-run Diversity Group Optimized', 'Fall-run Optimized - Beakes',
'Fall-run Optimized - Bilski')
fall_percent_change <- tibble(
`Scenario Name` = scenario_names,
`Description` = descriptions,
`Natural Spawners` = paste0(round(runif(13) * 100), "%"),
`Juvenile Biomass` = paste0(round(runif(13) * 100), "%")
)
spring_percent_change <- tibble(
# `Scenario Number ` = 1:13,
`Scenario Name` = rep("Scenario X", 13),
`Natural Spawners` = paste0(round(runif(13) * 100), "%"),
`Juvenile Biomass` = paste0(round(runif(13) * 100), "%")
)
winter_percent_change <- tibble(
# `Scenario Number ` = 1:13,
`Scenario Name` = rep("Scenario X", 13),
`Natural Spawners` = paste0(round(runif(13) * 100), "%"),
`Juvenile Biomass` = paste0(round(runif(13) * 100), "%")
)
scenario_numbers <- c('One', 'Two', 'Three',
'Four', 'Five', 'Six',
'Seven', 'Eight', 'Nine',
'Ten', 'Eleven', 'Twelve',
'Thirteen')
names(names) <- scenario_numbers
runApp()
runApp()
runApp()
input$Scenario
runApp()
runApp()
runApp()
runApp()
HTML("fefwe")
scenario_names["One"]
scenario_definitions["One"]
scenario_numbers <- c('One', 'Two', 'Three',
'Four', 'Five', 'Six',
'Seven', 'Eight', 'Nine',
'Ten', 'Eleven', 'Twelve',
'Thirteen')
names(names) <- scenario_numbers
names(descriptions) <- scenario_numbers
runApp()
library(shiny)
library(shinycssloaders)
library(shinythemes)
library(tidyverse)
library(plotly)
library(stringr)
library(DT)
library(DSMscenario)
source('modules/fall_run_server.R')
source('modules/spring_run_server.R')
# Load scenario dataframe
scenario_data <- read_rds('data/scenario_data.rds')
colors <- c("#85D4E3", "#F4B5BD", "#9C964A", "#CDC08C", "#FAD77B")
# TODO fix these to reflect new names/descriptions (Need 13)
descriptions <- c(
"Restoration limited to in-channel Upper Sacramento, Butte, Lower Mid Sac, Feather, American, Deer, Battle. and Stanislaus",
"Restoration limited to in-channel Upper Sacramento, Butte, Lower Mid Sac, Feather, American, Deer, Clear, and Stanislaus",
"Restoration limited to in-channel Upper Sacramento, Butte, Lower Mid Sac, Feather, American, Mokelumne, Clear, and Stanislaus",
"Restoration limited to in-channel in Mainstem Sacramento only",
"Restoration limited to in-channel Upper Sac, Lower Mid Sac, Cow Creek and Clear",
"Restoration limited to in-channel Upper Sac, Lower Mid, and American with some maintenance in Clear and Butte",
"Restoration limited to floodplain Upper Sac, Upper Mid, Lower Mid, Lower Sac, and San Joaquin",
"Restoration optimized to increase Winter-run population every year (limited to locations where WR occur)",
"Restoration optimized to increase Spring-run population every year (limited to locations where SR occur)",
"Restoration limited to in-channel equally distributed between Upper Mid, Deer, Butte, Clear, Mill, Battle, Antelope",
"Restoration optimized to increase Fall-run population every year (one action in each diversity group)",
"Restoration optimized to increase Fall-run population every year (one action in each diversity group)",
"Restoration optimized to increase Fall-run population every year (actions limited to Upper Sac, Lower Sac, American, Stanislaus, and Mokelumne)"
)
scenario_names <- c('In-Channel Only - Urkov', 'In-Channel Only - Brown', 'In-Channel Only - Bilski',
'In-Channel Only - Mainstem Sac', 'In-Channel Only - Berry', 'In-Channel Only - Peterson',
'Floodplain Only - Mainstem Sac', 'Winter-run Optimized',
'Spring-run Optimized', 'Spring-run In-Channel - Philips',
'Fall-run Diversity Group Optimized', 'Fall-run Optimized - Beakes',
'Fall-run Optimized - Bilski')
fall_percent_change <- tibble(
`Scenario Name` = scenario_names,
`Description` = descriptions,
`Natural Spawners` = paste0(round(runif(13) * 100), "%"),
`Juvenile Biomass` = paste0(round(runif(13) * 100), "%")
)
spring_percent_change <- tibble(
# `Scenario Number ` = 1:13,
`Scenario Name` = rep("Scenario X", 13),
`Natural Spawners` = paste0(round(runif(13) * 100), "%"),
`Juvenile Biomass` = paste0(round(runif(13) * 100), "%")
)
winter_percent_change <- tibble(
# `Scenario Number ` = 1:13,
`Scenario Name` = rep("Scenario X", 13),
`Natural Spawners` = paste0(round(runif(13) * 100), "%"),
`Juvenile Biomass` = paste0(round(runif(13) * 100), "%")
)
scenario_numbers <- c('One', 'Two', 'Three',
'Four', 'Five', 'Six',
'Seven', 'Eight', 'Nine',
'Ten', 'Eleven', 'Twelve',
'Thirteen')
names(scenario_names) <- scenario_numbers
names(descriptions) <- scenario_numbers
scenario_names["One"]
descriptions["One"]
descriptions[["One"]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
